/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-12-15 03:12:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class add_005fproduct_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Users/phat/.m2/repository/javax/servlet/jstl/1.2/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153359882000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1308849601000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11\"></script>\r\n");
      out.write("\r\n");
      out.write("<body class=\"body\">\r\n");
      out.write("<div id=\"productModal\" class=\"modal\">\r\n");
      out.write("    <div class=\"modal-content\">\r\n");
      out.write("        <div class=\"modal-header\">\r\n");
      out.write("            <h1 class=\"Heading-H1\">Add Product</h1>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-wrapper is_add_form w-form\">\r\n");
      out.write("            <form id=\"addProductForm\" name=\"addProductForm-form\" method=\"get\" class=\"form\" action=\"#\">\r\n");
      out.write("                <!-- Product Select -->\r\n");
      out.write("                <div class=\"fields-wrapper is_contain_combobox\">\r\n");
      out.write("                    <label for=\"productSelect\" class=\"field-label\">Product's Name</label>\r\n");
      out.write("                    <select id=\"productSelect\" name=\"field\" class=\"combobox w-select\">\r\n");
      out.write("                        <option value=\"\">Select a product...</option>\r\n");
      out.write("                        ");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("                    </select>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"fields-wrapper is_contain_combobox\">\r\n");
      out.write("                    <label for=\"sizeSelect\" class=\"field-label\">Size</label>\r\n");
      out.write("                    <select id=\"sizeSelect\" name=\"field\" class=\"combobox w-select\">\r\n");
      out.write("                        <option value=\"\">Select a size...</option>\r\n");
      out.write("                        <option value=\"S\">S</option>\r\n");
      out.write("                        <option value=\"L\">L</option>\r\n");
      out.write("                        <option value=\"M\">M</option>\r\n");
      out.write("                        <option value=\"XL\">XL</option>\r\n");
      out.write("                        <option value=\"XXL\">XXL</option>\r\n");
      out.write("                    </select>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <!-- Product ID -->\r\n");
      out.write("                <div class=\"fields-wrapper\">\r\n");
      out.write("                    <label for=\"productId\" class=\"field-label\">Product's ID</label>\r\n");
      out.write("                    <input class=\"text-field is-form_add_product w-input\" name=\"productId\" type=\"text\" id=\"productId\" readonly />\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <!-- Quantity -->\r\n");
      out.write("                <div class=\"fields-wrapper\">\r\n");
      out.write("                    <label for=\"quantity\" class=\"field-label\">Quantity</label>\r\n");
      out.write("                    <input class=\"text-field is-form_add_product w-input\" name=\"quantity\" type=\"text\" id=\"quantity\" />\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <!-- Price -->\r\n");
      out.write("                <div class=\"fields-wrapper\">\r\n");
      out.write("                    <label for=\"price\" class=\"field-label\">Price</label>\r\n");
      out.write("                    <input class=\"text-field is-form_add_product w-input\" name=\"price\" type=\"text\" id=\"price\" />\r\n");
      out.write("                </div>\r\n");
      out.write("            </form>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- Buttons for Add and Cancel -->\r\n");
      out.write("        <div class=\"form_button\">\r\n");
      out.write("            <a href=\"#\" type=\"submit\" class=\"button is-medium-button w-button\" id=\"addProductBtn\">Add</a>\r\n");
      out.write("            <a href=\"#\" class=\"button is-medium-button is-red w-button close\">Cancel</a>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    const productSelect = document.getElementById(\"productSelect\");\r\n");
      out.write("    const sizeSelect = document.getElementById(\"sizeSelect\");\r\n");
      out.write("    const productIdField = document.getElementById(\"productId\");\r\n");
      out.write("    const quantityField = document.getElementById(\"quantity\");\r\n");
      out.write("    const priceField = document.getElementById(\"price\");\r\n");
      out.write("    let counter = 1;\r\n");
      out.write("\r\n");
      out.write("    // When 'Add' button is clicked\r\n");
      out.write("    function addProductToTable(size, productId, quantity, price) {\r\n");
      out.write("        // Get form values\r\n");
      out.write("        let productName = productSelect.options[productSelect.selectedIndex].text;\r\n");
      out.write("\r\n");
      out.write("        const total = (quantity * price).toString();\r\n");
      out.write("\r\n");
      out.write("        // Check if product already exists in the table\r\n");
      out.write("        let table = document.getElementById(\"result\");\r\n");
      out.write("        let rows = table.getElementsByTagName(\"tr\");\r\n");
      out.write("        let found = false;\r\n");
      out.write("\r\n");
      out.write("        // Loop through the table rows to find the matching product ID\r\n");
      out.write("        for (let i = 0; i < rows.length; i++) {\r\n");
      out.write("            let cells = rows[i].getElementsByTagName(\"td\");\r\n");
      out.write("            if (cells.length > 0 && cells[1].textContent === productId && cells[3].textContent === size) { // Check if productId matches\r\n");
      out.write("                // Update the existing row with new quantity, price, and total\r\n");
      out.write("                let existingQuantity = parseInt(cells[4].textContent);  // Existing quantity\r\n");
      out.write("                let existingPrice = parseFloat(cells[5].textContent);  // Existing price\r\n");
      out.write("                let newQuantity = existingQuantity + parseInt(quantity); // Add the new quantity to existing one\r\n");
      out.write("                let newTotal = newQuantity * price; // Recalculate total using the old price\r\n");
      out.write("                let oldTotal = existingPrice * existingQuantity;\r\n");
      out.write("\r\n");
      out.write("                cells[5].textContent = price;\r\n");
      out.write("                cells[4].textContent = newQuantity;  // Update quantity\r\n");
      out.write("                cells[6].textContent = newTotal.toFixed(2);  // Update total\r\n");
      out.write("\r\n");
      out.write("                // Update the total price field\r\n");
      out.write("                updateTotalPrice((newTotal - oldTotal).toFixed(2));\r\n");
      out.write("\r\n");
      out.write("                found = true; // Product found and updated\r\n");
      out.write("                break;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // If the product wasn't found, create a new row\r\n");
      out.write("        if (!found) {\r\n");
      out.write("            let parent = document.createElement('tr');\r\n");
      out.write("            parent.classList.add('table_row');\r\n");
      out.write("\r\n");
      out.write("            let indexCol = document.createElement('td');\r\n");
      out.write("            indexCol.classList.add('table_cell', 'align-middle', 'text-center');\r\n");
      out.write("            let IDCol = document.createElement('td');\r\n");
      out.write("            IDCol.classList.add('table_cell', 'align-middle', 'text-center');\r\n");
      out.write("            let nameCol = document.createElement('td');\r\n");
      out.write("            nameCol.classList.add('table_cell', 'align-middle', 'text-center');\r\n");
      out.write("            let sizeCol = document.createElement('td');\r\n");
      out.write("            sizeCol.classList.add('table_cell', 'align-middle', 'text-center');\r\n");
      out.write("            let quanCol = document.createElement('td');\r\n");
      out.write("            quanCol.classList.add('table_cell', 'align-middle', 'text-center');\r\n");
      out.write("            let priceCol = document.createElement('td');\r\n");
      out.write("            priceCol.classList.add('table_cell', 'align-middle', 'text-center');\r\n");
      out.write("            let totalCol = document.createElement('td');\r\n");
      out.write("            totalCol.classList.add('table_cell', 'align-middle', 'text-center');\r\n");
      out.write("\r\n");
      out.write("            let indexText = document.createTextNode(counter.toString());\r\n");
      out.write("            let idText = document.createTextNode(productId);\r\n");
      out.write("            let nameText = document.createTextNode(productName);\r\n");
      out.write("            let sizeText = document.createTextNode(size);\r\n");
      out.write("            let quanText = document.createTextNode(quantity);\r\n");
      out.write("            let priceText = document.createTextNode(price);\r\n");
      out.write("            let totalText = document.createTextNode(total);\r\n");
      out.write("\r\n");
      out.write("            indexCol.appendChild(indexText);\r\n");
      out.write("            IDCol.appendChild(idText);\r\n");
      out.write("            nameCol.appendChild(nameText);\r\n");
      out.write("            sizeCol.appendChild(sizeText);\r\n");
      out.write("            quanCol.appendChild(quanText);\r\n");
      out.write("            priceCol.appendChild(priceText);\r\n");
      out.write("            totalCol.appendChild(totalText);\r\n");
      out.write("\r\n");
      out.write("            parent.appendChild(indexCol);\r\n");
      out.write("            parent.appendChild(IDCol);\r\n");
      out.write("            parent.appendChild(nameCol);\r\n");
      out.write("            parent.appendChild(sizeCol);\r\n");
      out.write("            parent.appendChild(quanCol);\r\n");
      out.write("            parent.appendChild(priceCol);\r\n");
      out.write("            parent.appendChild(totalCol);\r\n");
      out.write("\r\n");
      out.write("            document.getElementById('result').appendChild(parent);\r\n");
      out.write("\r\n");
      out.write("            updateTotalPrice(total);\r\n");
      out.write("            counter++;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // Close modal\r\n");
      out.write("        document.getElementById(\"productModal\").style.display = \"none\";\r\n");
      out.write("\r\n");
      out.write("        // Clear modal fields for next input\r\n");
      out.write("        productSelect.value = \"\";\r\n");
      out.write("        sizeSelect.value = \"\";\r\n");
      out.write("        productIdField.value = \"\";\r\n");
      out.write("        quantityField.value = \"\";\r\n");
      out.write("        priceField.value = \"\";\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Function to update total price\r\n");
      out.write("    function updateTotalPrice(newTotal) {\r\n");
      out.write("        const totalPriceField = document.getElementById(\"totalPriceField\");\r\n");
      out.write("        let currentTotal = parseFloat(totalPriceField.value) || 0;\r\n");
      out.write("        currentTotal += parseFloat(newTotal);\r\n");
      out.write("        totalPriceField.value = currentTotal.toFixed(2);\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("    $(document).ready(function () {\r\n");
      out.write("        function getMessageContent(messageId, event) {\r\n");
      out.write("            fetch('csvdata?id=' + messageId)\r\n");
      out.write("                .then(response => response.json())\r\n");
      out.write("                .then(data => {\r\n");
      out.write("                    if (data.message) {\r\n");
      out.write("                        let swalOptions = {\r\n");
      out.write("                            title: data.message,\r\n");
      out.write("                            confirmButtonText: \"OK\"\r\n");
      out.write("                        };\r\n");
      out.write("\r\n");
      out.write("                        // Kiá»m tra cÃ¡c loáº¡i thÃ´ng bÃ¡o\r\n");
      out.write("                        if (messageId === \"SUCCESS_CREATE_NEW_CUSTOMER\" || messageId === \"SUCCESS_UPDATE_CUSTOMER\") {\r\n");
      out.write("                            swalOptions.icon = \"success\";  // Biá»u tÆ°á»£ng success\r\n");
      out.write("                        } else if (messageId === \"DUPLICATE_CUSTOMER_EMAIL\" || messageId === \"FAIL_UPDATE_CUSTOMER\") {\r\n");
      out.write("                            swalOptions.icon = \"error\";  // Biá»u tÆ°á»£ng error\r\n");
      out.write("                        } else {\r\n");
      out.write("                            swalOptions.icon = \"info\";   // Biá»u tÆ°á»£ng máº·c Äá»nh\r\n");
      out.write("                        }\r\n");
      out.write("\r\n");
      out.write("                        // Hiá»n thá» thÃ´ng bÃ¡o vá»i Swal\r\n");
      out.write("                        Swal.fire(swalOptions)\r\n");
      out.write("                            .then((result) => {\r\n");
      out.write("                                if (result.isConfirmed) {\r\n");
      out.write("                                    // Chuyá»n hÆ°á»ng hoáº·c hÃ nh Äá»ng sau khi nháº¥n OK náº¿u cáº§n\r\n");
      out.write("                                    if (messageId === \"SUCCESS_CREATE_NEW_CUSTOMER\" || messageId === \"SUCCESS_UPDATE_CUSTOMER\") {\r\n");
      out.write("                                        window.location.href = \"list_customer\";\r\n");
      out.write("                                    }\r\n");
      out.write("                                }\r\n");
      out.write("                            });\r\n");
      out.write("\r\n");
      out.write("                        event.preventDefault();\r\n");
      out.write("                    } else {\r\n");
      out.write("                        Swal.fire(\"Message not found\");\r\n");
      out.write("                        event.preventDefault();\r\n");
      out.write("                    }\r\n");
      out.write("                })\r\n");
      out.write("                .catch(error => {\r\n");
      out.write("                    console.error(\"Error: \", error);\r\n");
      out.write("                });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        $(\"#productSelect\").change(function() {\r\n");
      out.write("            const selectedProductId = $(this).val();\r\n");
      out.write("            $(\"#productId\").val(selectedProductId);\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        document.getElementById(\"addProductBtn\").addEventListener(\"click\", function (event){\r\n");
      out.write("            event.preventDefault();\r\n");
      out.write("\r\n");
      out.write("            let size = document.getElementById(\"sizeSelect\").value;\r\n");
      out.write("            let productId = $(\"#productId\").val();\r\n");
      out.write("            let quantity = $(\"#quantity\").val();\r\n");
      out.write("            let price = $(\"#price\").val();\r\n");
      out.write("            const specialCharRegex = /[^a-zA-Z0-9\\s]/;\r\n");
      out.write("            const onlyNumbersRegex = /^[0-9]+$/;\r\n");
      out.write("\r\n");
      out.write("            if(!productId){\r\n");
      out.write("                getMessageContent(\"NOT_NULL_IMPORT_PRODUCT_ID\", event);\r\n");
      out.write("                $(\"#productSelect\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if(size === \"\"){\r\n");
      out.write("                getMessageContent(\"NOT_NULL_IMPORT_SIZE\", event);\r\n");
      out.write("                $(\"#sizeSelect\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if(quantity.trim() === \"\"){\r\n");
      out.write("                getMessageContent(\"NOT_NULL_IMPORT_QUANTITY\", event);\r\n");
      out.write("                $(\"#quantity\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if(specialCharRegex.test(quantity)){\r\n");
      out.write("                getMessageContent(\"NO_ITALIC-CHARACTER_IMPORT_QUANTITY\", event);\r\n");
      out.write("                $(\"#quantity\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if (!onlyNumbersRegex.test(quantity)) {\r\n");
      out.write("                getMessageContent(\"ONLY_NUMBER_IMPORT_QUANTITY\", event);\r\n");
      out.write("                $(\"#quantity\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if(Number(quantity) <= 0){\r\n");
      out.write("                getMessageContent(\"IMPORT_QUANTITY_MUST_BE_POSITIVE\", event);\r\n");
      out.write("                $(\"#quantity\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if(price.trim() === \"\"){\r\n");
      out.write("                getMessageContent(\"NOT_NULL_IMPORT_PRICE\", event);\r\n");
      out.write("                $(\"#price\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if(specialCharRegex.test(price)){\r\n");
      out.write("                getMessageContent(\"NO_ITALIC-CHARACTER_IMPORT_PRICE\", event);\r\n");
      out.write("                $(\"#price\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if (!onlyNumbersRegex.test(price)) {\r\n");
      out.write("                getMessageContent(\"ONLY_NUMBER_IMPORT_PRICE\", event);\r\n");
      out.write("                $(\"#price\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if(Number(price) <= 0){\r\n");
      out.write("                getMessageContent(\"IMPORT_PRICE_MUST_BE_POSITIVE\", event);\r\n");
      out.write("                $(\"#price\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            addProductToTable(size, productId, quantity, price);\r\n");
      out.write("\r\n");
      out.write("            this.submit();\r\n");
      out.write("        });\r\n");
      out.write("        $(\"#addProductForm\").validate({\r\n");
      out.write("            rules:{\r\n");
      out.write("                productId: \"required\",\r\n");
      out.write("                size: \"required\",\r\n");
      out.write("                quantity: \"required\",\r\n");
      out.write("                price: \"required\"\r\n");
      out.write("            },\r\n");
      out.write("            messages:{\r\n");
      out.write("                size: \"\",\r\n");
      out.write("                productId: \"\",\r\n");
      out.write("                quantity: \"\",\r\n");
      out.write("                price: \"\"\r\n");
      out.write("            }\r\n");
      out.write("        })\r\n");
      out.write("\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /admin/add_product.jsp(18,24) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("shirt");
      // /admin/add_product.jsp(18,24) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/admin/add_product.jsp(18,24) '${shirtList}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${shirtList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("                            <option value=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${shirt.shirtID}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('"');
            out.write('>');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${shirt.shirtName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</option>\r\n");
            out.write("                        ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }
}
