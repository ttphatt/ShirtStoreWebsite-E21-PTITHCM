package com.shirtstore.entity;
// Generated Apr 20, 2024, 2:20:15â€¯PM by Hibernate Tools 4.3.6.Final

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Rate generated by hbm2java
 */
@Entity
@Table(name = "rate", catalog = "shirtstoredb")
@NamedQueries({
	@NamedQuery(name = "Rate.findAll", query = "SELECT r FROM Rate r ORDER BY r.rateTime DESC"),
	@NamedQuery(name = "Rate.countAll", query = "SELECT COUNT(*) FROM Rate r"),
	@NamedQuery(name = "Rate.findByCustomerAndShirt", query = "SELECT r FROM Rate r WHERE r.customer.customerId = :customerId AND r.shirt.shirtId = :shirtId"),
	@NamedQuery(name = "Rate.listMostFavoredShirts", query = "SELECT r.shirt, COUNT(r.shirt.shirtId) AS RateCount, AVG(r.ratingStars) AS AvgRating FROM Rate r "
															+ "GROUP BY r.shirt.shirtId HAVING AVG(r.ratingStars) >= 4.0 "
															+ "ORDER BY RateCount DESC, AvgRating DESC"),
	@NamedQuery(name = "Rate.countByShirt", query = "SELECT COUNT(*) FROM Rate r WHERE r.shirt.shirtId = :shirtId"),
	@NamedQuery(name = "Rate.countByCustomer", query = "SELECT COUNT(*) FROM Rate r WHERE r.customer.customerId = :customerId"),
	@NamedQuery(name = "Rate.listRatingStars", query = "SELECT r.ratingStars FROM Rate r GROUP BY r.ratingStars"),
	@NamedQuery(name = "Rate.countRatingStars", query = "SELECT COUNT(r.ratingStars) FROM Rate r GROUP BY r.ratingStars"),
})

public class Rate implements java.io.Serializable {

	private int rateId;
	private Customer customer;
	private Shirt shirt;
	private int ratingStars;
	private String headline;
	private String ratingDetail;
	private Date rateTime;

	public Rate() {
	}

	public Rate(int rateId, Customer customer, Shirt shirt, int ratingStars, String headline, String ratingDetail,
				Date rateTime) {
		this.rateId = rateId;
		this.customer = customer;
		this.shirt = shirt;
		this.ratingStars = ratingStars;
		this.headline = headline;
		this.ratingDetail = ratingDetail;
		this.rateTime = rateTime;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "rate_id", unique = true, nullable = false)
	public int getRateId() {
		return this.rateId;
	}

	public void setRateId(int rateId) {
		this.rateId = rateId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "customer_id", nullable = false)
	public Customer getCustomer() {
		return this.customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "product_id", nullable = false)
	public Shirt getShirt() {
		return this.shirt;
	}

	public void setShirt(Shirt shirt) {
		this.shirt = shirt;
	}

	@Column(name = "rating_stars", nullable = false)
	public int getRatingStars() {
		return this.ratingStars;
	}

	public void setRatingStars(int ratingStars) {
		this.ratingStars = ratingStars;
	}

	@Column(name = "headline", nullable = false, length = 50)
	public String getHeadline() {
		return this.headline;
	}

	public void setHeadline(String headline) {
		this.headline = headline;
	}

	@Column(name = "rating_detail", nullable = false, length = 200)
	public String getRatingDetail() {
		return this.ratingDetail;
	}

	public void setRatingDetail(String ratingDetail) {
		this.ratingDetail = ratingDetail;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "rate_time", nullable = false, length = 19)
	public Date getRateTime() {
		return this.rateTime;
	}

	public void setRateTime(Date rateTime) {
		this.rateTime = rateTime;
	}
	
	@javax.persistence.Transient
	public String getStars() {
		String res = "";
		
		int numberOfStars = ratingStars;
		
		for(int i = 1; i <= numberOfStars; i++) {
			res += "on,";
		}
		
		for(int i = numberOfStars + 1; i <= 5; i++) {
			res += "off,";
		}
		
		return res.substring(0, res.length() - 1);
	}
}
